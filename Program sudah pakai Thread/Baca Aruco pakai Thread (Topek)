import cv2
from cv2 import aruco
import numpy as np
from pymavlink import mavutil
from dronekit import connect, VehicleMode, LocationGlobalRelative
import time
import threading
import multiprocessing

#takeoff
def arm_and_takeoff(aTargetAltitude):
    print("Basic pre-arm checks")
    while not vehicle.is_armable:
        print (" Waiting for vehicle to initialise...")
        time.sleep(1)

    print ("Arming motors")
    vehicle.mode    = VehicleMode("GUIDED")
    vehicle.armed   = True
    time.sleep(5)

    while not vehicle.armed:
        print (" Waiting for arming...")
        time.sleep(1)

    print ("Taking off!")
    vehicle.simple_takeoff(aTargetAltitude) # Take off to target altitude

    while True:
        print (" Altitude: ", vehicle.location.global_relative_frame.alt)
        if vehicle.location.global_relative_frame.alt>=aTargetAltitude*0.95:
            print ("Reached target altitude")
            break
        time.sleep(1)
"""
#maju
def pitch(velocity_x, velocity_y, velocity_z, duration=0):
    msg = vehicle.message_factory.set_position_target_local_ned_encode(
        0,       # time_boot_ms (not used)
        0, 0,    # target system, target component
        mavutil.mavlink.MAV_FRAME_BODY_NED, # frame Needs to be MAV_FRAME_BODY_NED for forward/back left/right control.
        0b0000111111000111, # type_mask
        0, 0, 0, # x, y, z positions (not used)
        velocity_x, velocity_y, velocity_z, # m/s
        0, 0, 0, # x, y, z acceleration
        0, 0)
    for x in range(0,duration):
        vehicle.send_mavlink(msg)
        time.sleep(1)

#fungsi memanggil pitch
#pitch(velocity_x, velocity_y, velocity_z, duration)
pitch(1, 0, 0,4)

def yaw(heading, relative=False):
    if relative:
        is_relative=1 #yaw relative to direction of travel
    else:
        is_relative=0 #yaw is an absolute angle
    # create the CONDITION_YAW command using command_long_encode()
    msg = vehicle.message_factory.command_long_encode(
        0, 0,    # target system, target component
        mavutil.mavlink.MAV_CMD_CONDITION_YAW, #command
        0, #confirmation
        heading,    # param 1, yaw in degrees
        20,          # param 2, yaw speed deg/s
        1,          # param 3, direction -1 ccw, 1 cw
        is_relative, # param 4, relative offset 1, absolute angle 0
        0, 0, 0)    # param 5 ~ 7 not used
    # send command to vehicle
    vehicle.send_mavlink(msg)
"""
#fungsi memanggil yaw
#yaw(90)

def millis():
    return round(time.time() * 1000)

delay_ms = 1000  # 1000 milliseconds = 1 second
last_time = millis()




def move_drone():
    global id,x,y,z
    while True:
        if id == 21:
            print("ID = ", id)
            print("Drone Akan Maju")
            time.sleep(1)
        elif id == 7:
            print("ID = ", id)
            print("Drone Akan Maju")
            time.sleep(1)
        elif id == 20:
            print("ID = ", id)
            print("Drone Akan Kiri")
            time.sleep(1)
        elif (id == 1) :
            print("ID = ", id)
            print("Drone Akan Kanan")
            time.sleep(1)
        elif id == 5:
            print("ID = ", id)
            print("Drone Akan Landing")
            time.sleep(1)
        elif id == 0:
            print("ID = ", id)
            time.sleep(1)





def detect_aruco():
    calib_data_path = "MultiMatrix.npz"
    calib_data = np.load(calib_data_path)
    print(calib_data.files)

    cam_mat = calib_data["camMatrix"]
    dist_coef = calib_data["distCoef"]
    r_vectors = calib_data["rVector"]
    t_vectors = calib_data["tVector"]

    MARKER_SIZE = 8  # CM
    marker_dict = cv2.aruco.getPredefinedDictionary(aruco.DICT_6X6_100)
    param_markers = cv2.aruco.DetectorParameters()
    cap = cv2.VideoCapture(0)
    while True:


        ret, frame = cap.read()
        if not ret:
            break
        gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        marker_corners, marker_IDs, reject = cv2.aruco.detectMarkers(
            gray_frame, marker_dict, parameters=param_markers

        )
        if marker_corners:

            rVec, tVec, _ = cv2.aruco.estimatePoseSingleMarkers(
                marker_corners, MARKER_SIZE, cam_mat, dist_coef
            )
            total_markers = range(0, marker_IDs.size)

            for ids, corners, i in zip(marker_IDs, marker_corners, total_markers):
                cv2.polylines(
                    frame, [corners.astype(np.int32)], True, (0, 255, 255), 4, cv2.LINE_AA
                )
                corners = corners.reshape(4, 2)
                corners = corners.astype(int)
                top_right = corners[0].ravel()
                top_left = corners[1].ravel()
                bottom_right = corners[2].ravel()
                bottom_left = corners[3].ravel()

                # Draw the pose of the marker
                poir = cv2.drawFrameAxes(frame, cam_mat, dist_coef, rVec[i], tVec[i], 4, 4)
                cv2.putText(
                    frame,
                    f"id: {ids[0]} Dist: {round(tVec[i][0][2], 2)}",
                    top_right,
                    cv2.FONT_HERSHEY_PLAIN,
                    2.3,
                    (200, 100, 255),
                    2,
                    cv2.LINE_AA,
                )
                cv2.putText(
                    frame,
                    f"x:{round(tVec[i][0][0], 1)}, y:{round(tVec[i][0][1], 1)}",
                    bottom_right,
                    cv2.FONT_HERSHEY_PLAIN,
                    2.0,
                    (200, 100, 255),
                    2,
                    cv2.LINE_AA,
                )

                # print(ids, "  ", corners)
            global x,y,z
            x = round(tVec[i][0][0], 1)
            y = round(tVec[i][0][1], 1)
            z = round(tVec[i][0][2], 2)

            current_time = millis()
            global id
            if ids == 1:
                cv2.putText(
                    frame,
                    f"Belok Kanan",
                    bottom_left,
                    cv2.FONT_HERSHEY_PLAIN,
                    2.5,
                    (0, 0, 0),
                    2,
                    cv2.LINE_AA,
                )
                #coba2()
                id = 1
                last_time = current_time
            elif ids == 20:
                id = 20
                cv2.putText(
                    frame,
                    f"Belok Kiri",
                    bottom_left,
                    cv2.FONT_HERSHEY_PLAIN,
                    2.5,
                    (0, 0, 0),
                    2,
                    cv2.LINE_AA,
                )
                last_time = current_time
            elif ids == 21:
                id = 21
                cv2.putText(
                    frame,
                    f"Start dan Maju",
                    bottom_left,
                    cv2.FONT_HERSHEY_PLAIN,
                    2.5,
                    (0, 0, 0),
                    2,
                    cv2.LINE_AA,
                )
            elif ids == 7:
                id = 7
                cv2.putText(
                    frame,
                    f"Maju",
                    bottom_left,
                    cv2.FONT_HERSHEY_PLAIN,
                    2.5,
                    (0, 0, 0),
                    2,
                    cv2.LINE_AA,
                )
            elif ids == 5:
                id = 5
                cv2.putText(
                    frame,
                    f"Landing",
                    bottom_left,
                    cv2.FONT_HERSHEY_PLAIN,
                    2.5,
                    (0, 0, 0),
                    2,
                    cv2.LINE_AA,
                )
            else:
                cv2.putText(
                    frame,
                    f"Maju",
                    bottom_left,
                    cv2.FONT_HERSHEY_PLAIN,
                    2.5,
                    (0, 0, 0),
                    2,
                    cv2.LINE_AA,
                )


        if marker_IDs == None:
            id = 0


        # if (marker_IDs == None):

        # (id != 21) and (id != 7) and (id != 20) and (id != 1)

        cv2.imshow("frame", frame)

        key = cv2.waitKey(1)

    cap.release()

    cv2.destroyAllWindows()



if __name__ == "__main__":
    vehicle = connect("COM15", baud=57600)

    arm_and_takeoff(2)

    t1 = threading.Thread(target=detect_aruco)
    t2 = threading.Thread(target=move_drone)

    t1.start()
    t2.start()

    t1.join()
    t2.join()
